defmodule MyApp.Repo.Migrations.MigrateResources1 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    alter table(:users) do
      add :archived_at, :utc_datetime_usec
    end

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    create unique_index(:users, [:email],
             where: "(archived_at IS NULL)",
             name: "users_unique_email_index"
           )

    create table(:tasks, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
      add :title, :text, null: false
      add :description, :text
      add :status, :text, default: "pending"

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :project_id, :uuid
      add :archived_at, :utc_datetime_usec
    end

    create table(:projects, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true
    end

    alter table(:tasks) do
      modify :project_id,
             references(:projects,
               column: :id,
               name: "tasks_project_id_fkey",
               type: :uuid,
               prefix: "public"
             )
    end

    create unique_index(:tasks, [:title, :project_id],
             where: "(archived_at IS NULL)",
             name: "tasks_unique_name_per_project_index"
           )

    alter table(:projects) do
      add :name, :text, null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :archived_at, :utc_datetime_usec
    end

    create unique_index(:projects, [:name],
             where: "(archived_at IS NULL)",
             name: "projects_unique_name_index"
           )

    create table(:project_users, primary_key: false) do
      add :id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true

      add :project_id,
          references(:projects,
            column: :id,
            name: "project_users_project_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :user_id,
          references(:users,
            column: :id,
            name: "project_users_user_id_fkey",
            type: :uuid,
            prefix: "public"
          ),
          null: false

      add :created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")

      add :archived_at, :utc_datetime_usec
    end

    create unique_index(:project_users, [:project_id, :user_id],
             where: "(archived_at IS NULL)",
             name: "project_users_unique_project_user_index"
           )
  end

  def down do
    drop_if_exists unique_index(:project_users, [:project_id, :user_id],
                     name: "project_users_unique_project_user_index"
                   )

    drop constraint(:project_users, "project_users_project_id_fkey")

    drop constraint(:project_users, "project_users_user_id_fkey")

    drop table(:project_users)

    drop_if_exists unique_index(:projects, [:name], name: "projects_unique_name_index")

    alter table(:projects) do
      remove :archived_at
      remove :updated_at
      remove :created_at
      remove :name
    end

    drop_if_exists unique_index(:tasks, [:title, :project_id],
                     name: "tasks_unique_name_per_project_index"
                   )

    drop constraint(:tasks, "tasks_project_id_fkey")

    alter table(:tasks) do
      modify :project_id, :uuid
    end

    drop table(:projects)

    drop table(:tasks)

    drop_if_exists unique_index(:users, [:email], name: "users_unique_email_index")

    create unique_index(:users, [:email], name: "users_unique_email_index")

    alter table(:users) do
      remove :archived_at
    end
  end
end
